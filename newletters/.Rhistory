y[3]<-3
typeof(cool)
cool[3]=3
cool[1]=3
sqrt(34)
sqrt(49)
help(apply)
example(apply)
factors<-function(x){}
fix(factors)
factors(34)
factors(20)
factors(80)
fix(factors)
factorsimple<-function(x){}
fix(factorsimple)
factorsimple(80)
fix(factorsimple)
factorsimple(80)
primefactors<-function(x){}
fix(primefactors)
primefactors(30)
primefactors(100)
fix(primefactors)
primefactors(100)
fix(primefactors)
j<-c(1,2)
for(i in j){}
for(i in j){}
for(i in j){
print(i);
}
fix(primefactors)
primefactors(100)
fix(primefactors)
primefactors(100)
primefactors(1000)
fix(primefactors)
primefactors(545)
primefactors(547)
primefactors(549)
fix(primefactors)
primefactors(549)
fix(primefactors)
primefactors(27)
fix(primefactors)
primefactors(27)
fix(primefactors)
primefactors(27)
fix(primefactors)
x<c(1,2,3,4)
x<-c(1,2,3,4)
for(j in x[2:length(x)]){
print(j);
}
fix(primefactors)
primefactors(27)
fix(primefactors)
primefactors(27)
fix(primefactors)
kj
prevwd<-getwd();
setwd("/home/jaishankar/Documents/ANN/Font patterns for Rprog/");
con<-file("fonts(a-k)","r", blocking = FALSE);
chars<-readLines(con);
newchars<-list();
input<-list();
index<-1;
for(i in seq(1,length(chars),10))
{
newchars[[index]]<-chars[i:(i+8)];
temp<-strsplit(newchars[[index]],"");
temp<-unlist(temp);
temp[which(temp==".")] = -1;
temp[which(temp=="#")] = 1;
temp<-as.integer(temp);
input[[index]]<-temp;
index<-index+1;
}
con<-file("targets_for_fonts(a-k)","r", blocking = FALSE);
chars<-readLines(con);
newchars<-list();
target<-list();
index<-1;
for(i in seq(1,length(chars)))
{
temp<-strsplit(chars[i],"");
temp<-unlist(temp);
temp<-temp[-which(temp==",")];
temp[which(temp=="0")] = -1;
temp<-as.integer(temp);
target[[index]]<-temp;
index<-index+1;
}
con<-file("newfonts(a-k)","r", blocking = FALSE);
chars<-readLines(con);
newchars<-list();
testinput<-list();
index<-1;
for(i in seq(1,length(chars),10))
{
newchars[[index]]<-chars[i:(i+8)];
temp<-strsplit(newchars[[index]],"");
temp<-unlist(temp);
temp[which(temp==".")] = -1;
temp[which(temp=="#")] = 1;
temp<-as.integer(temp);
testinput[[index]]<-temp;
index<-index+1;
}
close(con)
setwd(prevwd);
chars
plot(chars)
inupt
input
plot(input)
plot(input,input)
plot(input[[1]],input[[1]])
input[[1]]
plot(input[[1]],input[[2]])
install.packages("ggplot")
install.packages("ggplot2")
library("ggplot2", lib.loc="/home/jaishankar/R/x86_64-suse-linux-gnu-library/3.0")
x<-round(runif(5,3,7))
x
y<-round(runif(5,3,7))
qplot(x,y)
qplot(x,y,geom="boxplot")
qplot(x,y,geom="hist")
qplot(x,y,geom="histogram")
qplot(x,y,geom="bar")
qplot(x,geom="bar")
qplot(x,geom="bar",binwidth=33)
qplot(x,geom="bar",binwidth=3)
qplot(x,geom="bar",binwidth=0.3)
qplot(x,geom="bar",binwidth=0.2)
x
install.packages("gWidgets2")
install.packages("gWidgetsRGtk2", dep = TRUE)
library("gWidgetsRGtk2", lib.loc="/home/jaishankar/R/x86_64-suse-linux-gnu-library/3.0")
library("gWidgets2", lib.loc="/home/jaishankar/R/x86_64-suse-linux-gnu-library/3.0")
obj <- gbutton("Hello world", container = gwindow())
require(gWidgets)options("guiToolkit"="RGtk2")
require(gWidgets)options("guiToolkit"="RGtk2")
require(gWidgets)
options("guiToolkit"="RGtk2")
obj <- gbutton("Hello world", container = gwindow())
install.packages("gWidgets2RGtk2")
require(gWidgets)
options("guiToolkit"="RGtk2")
obj <- gbutton("Hello world", container = gwindow())
window <- gwindow()
obj <- gbutton("Hello world", container = window)
obj1 <- gbutton("Hello New world", container = window)
obj <- glabel("Hello world", container = gwindow())
obj <- gedit("Hello world", container = gwindow())
obj <- gtext("Hello world", container = gwindow())
obj
summary(obj)
print(obj)
dir(obj)
obj <- gtable(c("hello","world"), container=gwindow())
obj <- gcheckboxgroup(c("hello","world"), container=gwindow())
obj <- gslider(from=0, to = 7734, by =100, value=0,container=gwindow())
obj <- gspinbutton(from=0, to = 7734, by =100, value=0,container=gwindow())
win <- gwindow("Hello World, ad nauseum", visible=TRUE)
group <- ggroup(horizontal = FALSE, container=win)
obj <- gbutton("Hello...",container=group, handler = function(h,...) gmessage("world"))
obj <- glabel("Hello...", container =group,handler = function(h,...) gmessage("world"))
obj <- gcombobox(c("Hello","world"), container=group)
obj <- gedit("Hello world", container=group)
obj <- gtext("Hello world", container=group, font.attr=list(style="bold"))
?gWidgetsRGtk-handlers
?gWidgetsRGtk-handlers
tr
trans
t
d<-"Hello i am Jaishankar's idiot"
library("stringr", lib.loc="/home/jaishankar/R/x86_64-suse-linux-gnu-library/3.0")
confirmDialog <- function(message, handler=NULL) {
window <- gwindow("Confirm")
group <- ggroup(container = window)
gimage("info", dirname="stock", size="dialog", container=group)
## A group for the message and buttons
inner.group <- ggroup(horizontal=FALSE, container = group)
glabel(message, container=inner.group, expand=TRUE)
## A group to organize the buttons
button.group <- ggroup(container = inner.group)
## Push buttons to right
addSpring(button.group)
gbutton("ok", handler=handler, container=button.group)
gbutton("cancel", handler = function(h,...) dispose(window),
container=button.group)
return()
}
confirmDialog("Hello World")
confirmDialog <- function(message, handler=NULL) {
window <- gwindow("Confirm")
group <- ggroup(container = window)
#gimage("info", dirname="stock", size="dialog", container=group)
## A group for the message and buttons
inner.group <- ggroup(horizontal=FALSE, container = group)
glabel(message, container=inner.group, expand=TRUE)
## A group to organize the buttons
button.group <- ggroup(container = inner.group)
## Push buttons to right
addSpring(button.group)
gbutton("ok", handler=handler, container=button.group)
gbutton("cancel", handler = function(h,...) dispose(window),
container=button.group)
return()
}
confirmDialog("Hello World")
source(file.choose())
window <- gwindow("TRY!!")
obj<-gedit(container=window)
button<-gbutton("Tell me",container=window, handler=texthandler)
texthandler<-function(){}
fix(texthandler)
window <- gwindow(horizontal=FALSE,"TRY!!")
window <- gwindow("TRY!!")
windowgroup<-ggroup(horizontal=FALSE,container=window)
obj<-gedit(container=group)
obj<-gedit(container=windowgroup)
button<-gbutton("Tell me",container=windowgroup, handler=texthandler)
texthandler
aaron<-svalue(obj)
aaron
aaron[3]
source(gfile())
files<-file.choose()
files
nb <- gnotebook(container = windowgroup, expand=TRUE)
obj<-gedit(container=group)
window<-gwindow("heloo")
button<-gbutton("Next",container=window)
library("gWidgets", lib.loc="/home/jaishankar/R/x86_64-suse-linux-gnu-library/3.0")
library("gWidgets2", lib.loc="/home/jaishankar/R/x86_64-suse-linux-gnu-library/3.0")
library("gWidgets2RGtk2", lib.loc="/home/jaishankar/R/x86_64-suse-linux-gnu-library/3.0")
library("gWidgetsRGtk2", lib.loc="/home/jaishankar/R/x86_64-suse-linux-gnu-library/3.0")
detach("package:gWidgets2RGtk2", unload=TRUE)
window<-gwindow("hello")
window<-gwindow("hello")
button<-gbutton("Next",container=window)
require(gWidgets)
options("guiToolkit"="RGtk2")
picfile<-file.choose()
#setwd("/home/jaishankar/Documents/ANN/Font patterns for Rprog/ppm_images/")
x <- read.pnm(picfile)
grey<-x@grey
test<-as.vector(t(grey)) #to get the matrix into a one dimensional vector...t() is for transpose.. transpose is necessary..otherwise the one dimensional vector does not come as expected
test[which(test==1)]=-1
test[which(test==0)]=1
require(gWidgets)
options("guiToolkit"="RGtk2")
picfile<-file.choose()
#setwd("/home/jaishankar/Documents/ANN/Font patterns for Rprog/ppm_images/")
x <- read.pnm(picfile)
grey<-x@grey
test<-as.vector(t(grey)) #to get the matrix into a one dimensional vector...t() is for transpose.. transpose is necessary..otherwise the one dimensional vector does not come as expected
test[which(test==1)]=-1
test[which(test==0)]=1
require(gWidgets)
options("guiToolkit"="RGtk2")
picfile<-file.choose()
#setwd("/home/jaishankar/Documents/ANN/Font patterns for Rprog/ppm_images/")
print(picfile)
x <- read.pnm(picfile)
library("pixmap", lib.loc="/home/jaishankar/R/x86_64-suse-linux-gnu-library/3.0")
require(gWidgets)
require(pixmap)
options("guiToolkit"="RGtk2")
picfile<-file.choose()
#setwd("/home/jaishankar/Documents/ANN/Font patterns for Rprog/ppm_images/")
print(picfile)
x <- read.pnm(picfile)
grey<-x@grey
test<-as.vector(t(grey)) #to get the matrix into a one dimensional vector...t() is for transpose.. transpose is necessary..otherwise the one dimensional vector does not come as expected
test[which(test==1)]=-1
test[which(test==0)]=1
require(gWidgets)
require(pixmap)
options("guiToolkit"="RGtk2")
picfile<-file.choose()
#setwd("/home/jaishankar/Documents/ANN/Font patterns for Rprog/ppm_images/")
print(picfile)
x <- read.pnm(picfile)
grey<-x@grey
test<-as.vector(t(grey)) #to get the matrix into a one dimensional vector...t() is for transpose.. transpose is necessary..otherwise the one dimensional vector does not come as expected
test[which(test==1)]=-1
test[which(test==0)]=1
test
require(gWidgets)
require(pixmap)
options("guiToolkit"="RGtk2")
picfile<-file.choose()
#setwd("/home/jaishankar/Documents/ANN/Font patterns for Rprog/ppm_images/")
print(picfile)
x <- read.pnm(picfile)
grey<-x@grey
predict<-as.vector(t(grey)) #to get the matrix into a one dimensional vector...t() is for transpose.. transpose is necessary..otherwise the one dimensional vector does not come as expected
predict[which(predict==1)]=-1
predict[which(predict==0)]=1
writeLines()
writeLines("New")
writeLines("New\n")
car("New\n")
cat("New\n")
require(stringr)
require(gWidgtes)
require(pixmap)
setwd("/home/jaishankar/Documents/R_prog/Project/letters/")
picfiles<-list.files()
trainingInputs<-list();
targets<-list();
noOutputUnits<- 26;
noTrainingInputs<-52;
noInputUnits<-81;
for(i in 1:length(picfiles))
{
picfile<-picfiles[i]
found<-str_locate(picfile,".pgm")
if(is.na(found[1]))
{
msg<-"Sorry Invalid File Input. Please restart the program and choose another file!"
gmessage(msg,title="Invalid File", handler=function(h,...){return()})
}else
{
x <- read.pnm(picfile)
grey<-x@grey
input<-as.vector(t(grey)) #to get the matrix into a one dimensional vector...t() is for transpose.. transpose is necessary..otherwise the one dimensional vector does not come as expected
input[which(input==1)]=-1
input[which(input==0)]=1
trainingInputs[[i]]<-input
t<-c(rep(-1,noOutputUnits));
t[i] = 1;
targets[[i]]<-t;
}
}
setwd("/home/jaishankar/Documents/R_prog/Project/newletters/")
picfiles<-list.files()
len<-length(picfiles)
for(i in 1:len)
{
picfile<-picfiles[i]
found<-str_locate(picfile,".pgm")
if(is.na(found[1]))
{
msg<-"Sorry Invalid File Input. Please restart the program and choose another file!"
gmessage(msg,title="Invalid File", handler=function(h,...){return()})
}else
{
x <- read.pnm(picfile)
grey<-x@grey
input<-as.vector(t(grey)) #to get the matrix into a one dimensional vector...t() is for transpose.. transpose is necessary..otherwise the one dimensional vector does not come as expected
input[which(input==1)]=-1
input[which(input==0)]=1
trainingInputs[[i+len]]<-input
t<-c(rep(-1,noOutputUnits));
t[i] = 1;
targets[[i+len]]<-t;
}
}
require(gWidgets)
require(pixmap)
require(stringr)
options("guiToolkit"="RGtk2")
picfile<-file.choose()
setwd("/home/jaishankar/Documents/R_prog/Project")
print(picfile)
found<-str_locate(picfile,".pgm")
assign("inputPredict",c())
if(is.na(found[1]))
{
msg<-"Sorry Invalid File Input. Please restart the program and choose another file!"
gmessage(msg,title="Invalid File", handler=function(h,...){return()})
}
x <- read.pnm(picfile)
grey<-x@grey
inputPredict<-as.vector(t(grey)) #to get the matrix into a one dimensional vector...t() is for transpose.. transpose is necessary..otherwise the one dimensional vector does not come as expected
inputPredict[which(inputPredict==1)]<--1
inputPredict[which(inputPredict==0)]<-1
source("./maintrainingnetwork.R")
require(RSNNS)
mlpTrainingInputs<-matrix(nrow=noTrainingInputs,ncol=noInputUnits)
mlpTrainingTargets<-matrix(nrow=noTrainingInputs,ncol=noOutputUnits)
for(i in 1:length(trainingInputs))
{
mlpTrainingInputs[i,]<-trainingInputs[[i]];
mlpTrainingInputs[which(mlpTrainingInputs==-1)]=0;
mlpTrainingTargets[i,]<-targets[[i]];
mlpTrainingTargets[which(mlpTrainingTargets==-1)]=0;
}
# model<-mlp(mlpTrainingInputs,mlpTrainingTargets,size=c(noOutputUnits),
#            hiddenActFunc = "Act_Logistic", learnFuncParams = c(0.4, 0.0),
#            learnFunc = "Std_Backpropagation")
model<-mlp(mlpTrainingInputs,mlpTrainingTargets,size=c(noOutputUnits),hiddenActFunc = "Act_Logistic")
test<-matrix(inputPredict,nrow=1)
test[which(test==-1)]<-0
predictedoutput<-predict.rsnns(model,test)
predictedoutput<-round(predictedoutput)
index<-which(predictedoutput==1);
writeLines(targetChars[index]);
resultWindow<-gwindow("Predicted Output");
label<-glabel(targetChars[index],container=resultWindow)
font(label)<- list(family="times",size=120,weight="bold",style="bold")
require(gWidgets)
require(pixmap)
require(stringr)
options("guiToolkit"="RGtk2")
picfile<-file.choose()
setwd("/home/jaishankar/Documents/R_prog/Project")
print(picfile)
found<-str_locate(picfile,".pgm")
assign("inputPredict",c())
if(is.na(found[1]))
{
msg<-"Sorry Invalid File Input. Please restart the program and choose another file!"
gmessage(msg,title="Invalid File", handler=function(h,...){return()})
}
x <- read.pnm(picfile)
grey<-x@grey
inputPredict<-as.vector(t(grey)) #to get the matrix into a one dimensional vector...t() is for transpose.. transpose is necessary..otherwise the one dimensional vector does not come as expected
inputPredict[which(inputPredict==1)]<--1
inputPredict[which(inputPredict==0)]<-1
source("./maintrainingnetwork.R")
require(RSNNS)
mlpTrainingInputs<-matrix(nrow=noTrainingInputs,ncol=noInputUnits)
mlpTrainingTargets<-matrix(nrow=noTrainingInputs,ncol=noOutputUnits)
for(i in 1:length(trainingInputs))
{
mlpTrainingInputs[i,]<-trainingInputs[[i]];
mlpTrainingInputs[which(mlpTrainingInputs==-1)]=0;
mlpTrainingTargets[i,]<-targets[[i]];
mlpTrainingTargets[which(mlpTrainingTargets==-1)]=0;
}
# model<-mlp(mlpTrainingInputs,mlpTrainingTargets,size=c(noOutputUnits),
#            hiddenActFunc = "Act_Logistic", learnFuncParams = c(0.4, 0.0),
#            learnFunc = "Std_Backpropagation")
model<-mlp(mlpTrainingInputs,mlpTrainingTargets,size=c(noOutputUnits),hiddenActFunc = "Act_Logistic")
test<-matrix(inputPredict,nrow=1)
test[which(test==-1)]<-0
predictedoutput<-predict.rsnns(model,test)
predictedoutput<-round(predictedoutput)
index<-which(predictedoutput==1);
writeLines(targetChars[index]);
resultWindow<-gwindow("Predicted Output");
label<-glabel(targetChars[index],container=resultWindow)
font(label)<- list(family="times",size=120,weight="bold",style="bold")
require(RSNNS)
require(ANN)
mlpTrainingInputs<-matrix(nrow=noTrainingInputs,ncol=noInputUnits)
mlpTrainingTargets<-matrix(nrow=noTrainingInputs,ncol=noOutputUnits)
for(i in 1:length(trainingInputs))
{
mlpTrainingInputs[i,]<-trainingInputs[[i]];
mlpTrainingInputs[which(mlpTrainingInputs==-1)]=0;
mlpTrainingTargets[i,]<-targets[[i]];
mlpTrainingTargets[which(mlpTrainingTargets==-1)]=0;
}
res<-ANNGA(x=mlpTrainingInputs,y=mlpTrainingTargets,design=c(noInputUnits, noOutputUnits , noOutputUnits),population=100,mutation = 0.2,
crossover = 0.6,
minW	=-10,
maxW	=10,
maxGen  =1000,
error   =0.001)
test<-matrix(inputPredict,nrow=1)
test[which(test==-1)]<-0
predictedoutput<-predict.ANN(res,test)
predictedoutput<-predictedoutput$predict;
predictedoutput<-round(predictedoutput)
index<-which(predictedoutput==1);
writeLines(targetChars[index]);
resultWindow<-gwindow("Predicted Output");
label<-glabel(targetChars[index],container=resultWindow)
font(label)<- list(family="times",size=120,weight="bold",style="bold")
require(RSNNS)
require(ANN)
mlpTrainingInputs<-matrix(nrow=noTrainingInputs,ncol=noInputUnits)
mlpTrainingTargets<-matrix(nrow=noTrainingInputs,ncol=noOutputUnits)
for(i in 1:length(trainingInputs))
{
mlpTrainingInputs[i,]<-trainingInputs[[i]];
mlpTrainingInputs[which(mlpTrainingInputs==-1)]=0;
mlpTrainingTargets[i,]<-targets[[i]];
mlpTrainingTargets[which(mlpTrainingTargets==-1)]=0;
}
res<-ANNGA(x=mlpTrainingInputs,y=mlpTrainingTargets,design=c(noInputUnits, noOutputUnits , noOutputUnits),population=100,mutation = 0.2,
crossover = 0.6,
minW	=-10,
maxW	=10,
maxGen  =100,
error   =0.001)
test<-matrix(inputPredict,nrow=1)
test[which(test==-1)]<-0
predictedoutput<-predict.ANN(res,test)
predictedoutput<-predictedoutput$predict;
predictedoutput<-round(predictedoutput)
index<-which(predictedoutput==1);
writeLines(targetChars[index]);
resultWindow<-gwindow("Predicted Output");
label<-glabel(targetChars[index],container=resultWindow)
font(label)<- list(family="times",size=120,weight="bold",style="bold")
mainWindow<-gwindow("ANN R Learning")
mainGroup<-ggroup(horizontal=FALSE,container=mainWindow)
trainingGroup<-ggroup(horizontal=TRUE,container=mainGroup)
trainSelect <- gradio(c("Delta Rule","Perceptron","Hebb Rule"), container=gwindow())
mainWindow<-gwindow("ANN R Learning")
mainGroup<-ggroup(horizontal=FALSE,container=mainWindow)
trainingGroup<-ggroup(horizontal=TRUE,container=mainGroup)
trainSelect <- gradio(c("Delta Rule","Perceptron","Hebb Rule"), container=gwindow())
